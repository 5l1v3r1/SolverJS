var table = require('./table.js');
var State = require('../state.js').State;
var choosetable = require('./choosetable.js');

// an ordered map of 12 bit integers for all 12 choose 4
// ways that E slice edges could be distributed
var chooseMap = null;

/**
 * This is a State which records the distribution of E-Slice
 * edges throughout a cube.
 */
function EChoose(flags) {
    this.flags = flags;
    this.bitFlags = choosetable.encodeChoose(flags);
}

EChoose.prototype = Object.create(State.prototype);

EChoose.prototype.hash = function() {
    if (!chooseMap) {
        // generate E-Slice hashes
        chooseMap = choosetable.generateTable();
    }
    return chooseMap.indexOf(this.bitFlags);
}

EChoose.prototype.hashCount = function() {
    return 495; // 12 choose 4
}

EChoose.prototype.moveFace = function(face) {
    var transformation = table.EdgeTable[face];
    var flags = this.flags.slice(0);
    for (var i = 0; i < 4; i++) {
        flags[transformation[0][i]] = flags[transformation[1][i]];
    }
    return new EChoose(flags);
}

EChoose.prototype.rotateZ = function(zPower) {
    if (zPower == 0) return this;
    var newFlags = new Array(12);
    for (var i = 0; i < 12; i++) {
        newFlags[i] = this.flags[table.EdgeZRotation[i]];
    }
    return (new EChoose(newFlags)).rotateZ(zPower - 1);
}

EChoose.prototype.rotateY = function(yPower) {
    if (yPower == 0) return this;
    var newFlags = new Array(12);
    for (var i = 0; i < 12; i++) {
        newFlags[i] = this.flags[table.EdgeYRotation[i]];
    }
    return (new EChoose(newFlags)).rotateY(yPower - 1);
}

EChoose.prototype.flipLR = function(flag) {
    if (!flag) return this;
    var swapLeft = [4, 3, 10, 9], swapRight = [5, 1, 11, 7];
    var flags = this.flags.slice(0);
    for (var i = 0; i < 4; i++) {
        flags[swapLeft[i]] = this.flags[swapRight[i]];
        flags[swapRight[i]] = this.flags[swapLeft[i]];
    }
    return new EChoose(flags);
}

exports.EChoose = EChoose;

exports.generate = function () {
    var flags = choosetable.generateChooseFlags();
    return flags.map(function (x) {
        return new EChoose(x);
    });
}
