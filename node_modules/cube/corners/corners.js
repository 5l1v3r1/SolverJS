var CornerTable = require('./table.js').table;

function CornerOrientations(orientations) {
    this.orientations = orientations;
}

CornerOrientations.prototype.move = function(slots, pieces, normalAxis) {
    var target = this.orientations.slice(0);
    for (var i = 0; i < 4; i++) {
        // apply the transformation
        var slot = slots[i];
        target[slot] = this.orientations[pieces[i]];
        // apply the symmetry rotation
        if (target[slot] != normalAxis && move.power != 2) {
            if (normalAxis == 2) {
                target[slot] ^= 1;
            } else if (normalAxis == 1) {
                target[slot] = (target[slot] == 2 ? 0 : 2);
            } else {
                target[slot] = ((target[slot] - 1) ^ 1) + 1;
            }
        }
    }
    return new CornerOrientations(target);
}

/**
 * Creates a new representation of the corners on a 3x3 Rubik's cube
 * @argument orientations An array of 3 CornerOrientation objects
 */
function Corners(orientations, permutation) {
    if (orientations) this.orientations = orientations;
    else {
        this.orientations = [new CornerOrientations([0, 0, 0, 0, 0, 0, 0, 0]),
                             new CornerOrientations([1, 1, 1, 1, 1, 1, 1, 1]),
                             new CornerOrientations([2, 2, 2, 2, 2, 2, 2, 2])];
    }
    if (permutation) this.permutation = permutation;
    else {
        this.permutation = [0, 1, 2, 3, 4, 5, 6, 7];
    }
}

Corners.move = function(move) {
    var slots = null, pieces = null;
    var transformation = CornerTable[move.face];
    var normalAxis = transformation[3];
    if (move.power == 1) {
        slots = transformation[0];
        pieces = transformation[1];
    } else if (move.power == 2) {
        slots = transformation[0];
        pieces = transformation[2];
    } else if (move.power == 3) {
        slots = transformation[1];
        pieces = transformation[0];
    } else {
        throw 'Unsupported power ' + move.power;
    }
    
    var permutation = this.permutation.slice(0);
    for (var i = 0; i < 4; i++) {
        // apply the transformation
        var slot = slots[i];
        permutation[slot] = this.permutation[pieces[i]];
    }
    
    var orientations = new Array(3);
    for (var i = 0; i < this.orientations.length; i++) {
        orientations[i] = this.orientations[i].move(slots, pieces, normalAxis);
    }
    
    return new Corners(orientations, permutation);
}

Corners.isSolved = function() {
    for (var i = 0; i < 7; i++) {
        if (this.orientations[0].orientations[i] != 0) return false;
    }
    for (var i = 0; i < 7; i++) {
        if (this.permutation[i] != i) return false;
    }
    return true;
}

exports.CornerOrientations = CornerOrientations;
exports.Corners = Corners;
