/**
 * Encodes a corner coordinate
 */
function PT(x, y, z) {
    return (x << 2) | (y << 1) | z;
}

/**
 * Entry format: [corner position, physical corner, normal axis]
 */
var CornerTable = [
    [ // F turn
        [PT(0, 1, 1), PT(1, 1, 1), PT(1, 0, 1), PT(0, 0, 1)],
        [PT(0, 0, 1), PT(0, 1, 1), PT(1, 1, 1), PT(1, 0, 1)],
        2
    ],
    [ // B turn
        [PT(0, 0, 0), PT(0, 1, 0), PT(1, 1, 0), PT(1, 0, 0)],
        [PT(0, 1, 0), PT(1, 1, 0), PT(1, 0, 0), PT(0, 0, 0)],
        2
    ],
    [ // U turn
        [PT(0, 1, 0), PT(1, 1, 0), PT(1, 1, 1), PT(0, 1, 1)],
        [PT(0, 1, 1), PT(0, 1, 0), PT(1, 1, 0), PT(1, 1, 1)],
        1
    ],
    [ // D turn
        [PT(0, 0, 1), PT(0, 0, 0), PT(1, 0, 0), PT(1, 0, 1)],
        [PT(0, 0, 0), PT(1, 0, 0), PT(1, 0, 1), PT(0, 0, 1)],
        1
    ],
    [ // R turn
        [PT(1, 1, 0), PT(1, 1, 1), PT(1, 0, 1), PT(1, 0, 0)],
        [PT(1, 1, 1), PT(1, 0, 1), PT(1, 0, 0), PT(1, 1, 0)],
        0
    ],
    [ // L turn
        [PT(0, 1, 1), PT(0, 0, 1), PT(0, 0, 0), PT(0, 1, 0)],
        [PT(0, 1, 0), PT(0, 1, 1), PT(0, 0, 1), PT(0, 0, 0)],
        0
    ]
];

exports.CornerTable = CornerTable;
