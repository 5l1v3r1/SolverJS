function subclassRequirement() {
    throw 'Must be implemented in a subclass';
}

/**
 * Abstract base class for a hashable state
 */
function State() { 
    this.calculatedHash = -1;
}

State.prototype.hash = function() {
    if (this.calculatedHash >= 0) {
        return this.calculatedHash;
    }
    this.calculatedHash = this.generateHash();
    return this.calculatedHash;
}

State.prototype.generateHash = function() {
    subclassRequirement();
}

State.prototype.hashCount = function() {
    subclassRequirement();
}

State.prototype.moveFace = function(face) {
    subclassRequirement();
}

State.prototype.rotateZ2 = function(flag) {
    subclassRequirement();
}

State.prototype.rotateY = function(yPower) {
    subclassRequirement();
}

State.prototype.flipLR = function(flag) {
    subclassRequirement();
}

/** General methods which need not be reimplemented **/

/**
 * Applies a symmetry to a State
 */
State.prototype.symmetrize = function(sym) {
    return this.rotateZ2(sym.z2).rotateY(sym.y).flipLR(sym.mirror);
}

/**
 * Returns a new State which is the result of applying move.
 */
State.prototype.move = function(aMove) {
    var result = this;
    for (var i = 0; i < aMove.power; i++) {
        result = this.moveFace(aMove.face);
    }
    return result;
}

exports.State = State;
