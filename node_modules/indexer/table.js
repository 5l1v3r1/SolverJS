var fs = require('fs');

var kBufferLength = 100000000;

function Table(count) {
    this.buffers = [];
    var numBytes = Math.ceil(count / 2);
    var bufferCount = Math.ceil(numBytes / kBufferLength);
    for (var i = 0; i < bufferCount; i++) {
        if (i == bufferCount - 1) {
            this.buffers.push(new Uint8Array(numBytes % kBufferLength));
        } else {
            this.buffers.push(new Uint8Array(kBufferLength));
        }
    }
}

Table.prototype.setValue = function(hash, value) {
    var overallByteIndex = (hash - (hash % 2)) / 2;
    var byteIndex = overallByteIndex % kBufferLength;
    
    var bufferIndex = (overallByteIndex - byteIndex) / kBufferLength;
    var buffer = this.buffers[bufferIndex];
    
    if (hash % 2 == 0) {
        buffer[byteIndex] &= (0xf << 4);
        buffer[byteIndex] |= value;
    } else {
        buffer[byteIndex] &= 0xf;
        buffer[byteIndex] |= (value << 4);
    }
}

Table.prototype.getValue = function(hash) {
    var overallByteIndex = (hash - (hash % 2)) / 2;
    var byteIndex = overallByteIndex % kBufferLength;
    
    var bufferIndex = (overallByteIndex - byteIndex) / kBufferLength;
    var buffer = this.buffers[bufferIndex];
    var byteValue = buffer[byteIndex];
    
    if (hash % 2 == 0) {
        return byteValue & 0xf;
    } else {
        return (byteValue >> 4) & 0xf;
    }
}

Table.prototype.save = function(file) {
    var stream = fs.createWriteStream(file);
    for (var i = 0; i < this.buffers.length; i++) {
        stream.write(new Buffer(this.buffers[i]));
    }
    stream.end();
}

exports.Table = Table;
