var Table = require('./table.js').Table;
var ContextState = require('./context').ContextState;
var FastList = require('fast-list');

function Node(state, depth) {
    this.state = state;
    this.depth = depth;
}

function Search(context, s1Id, s2Id) {
    this.context = context;
    this.table = new Table(context.hashCount());
    this.iterationTable = new Table(context.hashCount());
    this.nodeCount = 0;
    
    for (var i = 0; i < this.context.hashCount(); i++) {
        this.table.setValue(i, 15);
        this.iterationTable.setValue(i, 0);
    }
    
    this.identity = new ContextState(s1Id, s2Id);
    
    // fields used for backsearch
    this.nodes = new FastList();    
    this.backsearch = null;
}

Search.prototype.expandState = function(s) {
    var states = new Array();
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newState = this.context.moveState(s, i);
        
        var hash = this.context.hashState(newState);
        if (foundHashes.indexOf(hash) >= 0) continue;
        foundHashes.push(hash);
        
        states.push(newState);
    }
    return states;
}

Search.prototype.expand = function(s) {
    var states = new Array();
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newState = this.context.moveState(s.state, i);
        
        var hash = this.context.hashState(newState);
        if (foundHashes.indexOf(hash) >= 0) continue;
        foundHashes.push(hash);
        
        var node = new Node(newState, s.depth + 1);
        states.push(node);
    }
    return states;
}


/** Forward search functions **/

Search.prototype.nextIteration = function(depth, currentDepth, node) {
    if (currentDepth == undefined || node == undefined) {
        return this.nextIteration(depth, 0, this.identity);
    }
    
    var hash = this.context.hashState(node);
    var pruneValue = this.table.getValue(hash);
        
    if (pruneValue == 15) {
        this.table.setValue(hash, currentDepth);
        this.nodeCount++;
    } else {
        // this node has already been seen
        if (pruneValue < currentDepth) return;
        var iterationValue = this.iterationTable.getValue(hash);
        if (iterationValue == depth) {
            return;
        } else {
            this.iterationTable.setValue(hash, depth);
        }
    }
    
    if (currentDepth == depth) return;
    
    var expanded = this.expandState(node);
    for (var i = 0; i < expanded.length; i++) {
        this.nextIteration(depth, currentDepth + 1, expanded[i]);
    }
    
    return;
}

/** Backwards search **/

Search.prototype.initiateBacksearch = function() {
    // free all this unused memory
    this.iterationTable = null;
    this.backsearch = [];
    this.setupNextNode();
}

Search.prototype.generateNotFound = function(maximum) {
    var notFound = new Array();
    for (var i = 0; i < this.context.hashCount(); i++) {
        if (this.table.getValue(i) == 15) {
            notFound.push(i);
            if (notFound.length == maximum) break;
        }
    }
    this.backsearch = notFound;
}

Search.prototype.setupNextNode = function() {
    if (this.backsearch.length == 0) {
        this.generateNotFound(1000000);
        if (this.backsearch.length == 0) return false;
    }
    var stateHash = this.backsearch.pop();
    var state = this.context.unhashState(stateHash);
    this.nodes.push(new Node(state, 0));
    return true;
}

Search.prototype.nextBacksearch = function(maxReversal, forwardDepth) {
    if (this.nodes.length == 0) {
        return false;
    }
    
    var node = this.nodes.pop();
    var hash = this.context.hashState(node.state);
    var pruneValue = this.table.getValue(hash);
        
    if (pruneValue <= forwardDepth) {
        console.log('we found a node');
        // we found an initial node, so we are done
        if (pruneValue != forwardDepth) throw 'something is going wrong here: ' + pruneValue + ' ' + forwardDepth + ' ' + node.depth;
        
        var depth = node.depth + forwardDepth;
        this.table.setValue(hash, depth);
        this.nodeCount++;
        return this.setupNextNode();
    }
    
    if (node.depth == maxReversal) return true;
    var expanded = this.expand(node);
    for (var i = 0; i < expanded.length; i++) {
        this.nodes.push(expanded[i]);
    }
    
    return true;
}

exports.Search = Search;