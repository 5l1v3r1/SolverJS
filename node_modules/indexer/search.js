var Table = require('./table.js').Table;
var ContextState = require('./context').ContextState;
var FastList = require('fast-list');

function Node(state, depth) {
    this.state = state;
    this.depth = depth;
}

function Search(context, s1Id, s2Id) {
    this.context = context;
    this.table = new Table(context.hashCount());
    this.seenTable = new Array();
    this.nodeCount = 0;
    
    for (var i = 0; i < this.context.hashCount(); i++) {
        this.table.setValue(i, 15);
    }
    
    this.identity = new ContextState(s1Id, s2Id);
    
    // fields used for backsearch
    this.backsearch = null;
    this.startHash = null;
}

Search.prototype.expand = function(s) {
    var states = new Array();
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newState = this.context.moveState(s.state, i);
        var node = new Node(newState, s.depth + 1);      
        states.push(node);
    }
    return states;
}

/** Forward search functions **/

Search.prototype.nextIteration = function(depth, node) {
    if (!node) {
        return this.nextIteration(depth, new Node(this.identity, 0));
    }
    
    var hash = this.context.hashState(node.state);
    var pruneValue = this.table.getValue(hash);
        
    if (pruneValue == 15) {
        this.table.setValue(hash, node.depth);
        this.nodeCount++;
        if (this.nodeCount % 100000 == 0) {
            console.log('node count is ' + this.nodeCount);
        }
    } else {
        // this node has already been seen
        if (pruneValue < node.depth) return;
        if (this.seenTable[node.state.hash()] == depth) {
            return;
        } else {
            this.seenTable[node.state.hash()] = depth;
        }
    }
    
    if (node.depth == depth) return;
    
    var expanded = this.expand(node);
    for (var i = 0; i < expanded.length; i++) {
        this.nextIteration(depth, expanded[i]);
    }
    
    return;
}

/** Backwards search **/

Search.prototype.iterateBacksearch = function(depth) {
    for (var i = 0; i < this.context.hashCount(); i++) {
        if (this.table.getValue(i) == 15) {
            var state = this.context.unhashState(i);
            if (this.backsearchNode(new Node(state, depth))) {
                this.nodeCount++;
            }
        }
    }
}

Search.prototype.backsearchNode = function(node) {
    var expanded = this.expand(node);
    for (var i = 0; i < expanded.length; i++) {
        var hash = this.context.hashState(expanded[i].state);
        var value = this.table.getValue(hash);
        if (value != 15) {
            if (value = node.depth - 1) {
                this.table.setValue(this.context.hashState(node.state), node.depth);
                return true;
            }
        }
    }
    return false;
}

exports.Search = Search;