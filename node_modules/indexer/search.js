var Table = require('./table.js').Table;
var ContextState = require('./context').ContextState;

function Search(context, s1Id, s2Id) {
    this.context = context;
    this.table = new Table(context.hashCount());
    this.iterationTable = new Table(context.hashCount());
    this.nodeCount = 0;
    
    for (var i = 0; i < this.context.hashCount(); i++) {
        this.table.setValue(i, 15);
        this.iterationTable.setValue(i, 0);
    }
    
    this.identity = new ContextState(s1Id, s2Id);
    this.identity.moves = [];
}

Search.prototype.nextIteration = function(depth, currentDepth, node) {
    if (currentDepth == undefined || node == undefined) {
        return this.nextIteration(depth, 0, this.identity);
    }
    
    var hash = this.context.hashState(node);
    var pruneValue = this.table.getValue(hash);
        
    if (pruneValue == 15) {
        this.table.setValue(hash, currentDepth);
        this.nodeCount++;
    } else {
        // this node has already been seen
        if (pruneValue < currentDepth) return;
        var iterationValue = this.iterationTable.getValue(hash);
        if (iterationValue == depth) {
            return;
        } else {
            this.iterationTable.setValue(hash, depth);
        }
    }
    
    if (currentDepth == depth) return;
    
    var expanded = this.expand(node);
    for (var i = 0; i < expanded.length; i++) {
        this.nextIteration(depth, currentDepth + 1, expanded[i]);
    }
    
    return;
}

Search.prototype.expand = function(s) {
    var states = new Array();
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newState = this.context.moveState(s, i);
        
        var hash = this.context.hashState(newState);
        if (foundHashes.indexOf(hash) >= 0) continue;
        foundHashes.push(hash);
        
        newState.moves = s.moves.concat([i]);
        states.push(newState);
    }
    return states;
}

exports.Search = Search;