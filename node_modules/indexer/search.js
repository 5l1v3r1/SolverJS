var Table = require('./table.js').Table;

function Search(context, s1Id, s2Id) {
    this.context = context;
    this.nodes = new require('fast-list')();
    this.table = new Table(context.hashCount());
    this.depth = 0;
    this.nodeCount = 0;
    
    for (var i = 0; i < this.context.hashCount(); i++) {
        this.table.setValue(i, 15);
    }
    
    this.nodes.push([s1Id, s2Id, 0]);
    
    this.shiftTime = 0;
    this.hashTime = 0;
    this.expandTime = 0;
}

Search.prototype.nextIteration = function() {
    if (this.nodes.length == 0) return false;
    
    var shiftStart = new Date(); // 
    
    var state = this.nodes.shift();
    this.depth = state[2];
    
    this.shiftTime += (new Date()).getTime() - shiftStart.getTime(); //
    
    // check if state is a new configuration
    
    var hashStart = new Date();// 
    
    var hash = this.context.hashState(state[0], state[1]);
    var pruneValue = this.table.getValue(hash);
    
    this.hashTime += (new Date()).getTime() - hashStart.getTime();
    
    if (pruneValue == 15) {
        this.table.setValue(hash, state[2]);
        this.nodeCount++;
    } else {
        return true; // already found
    }
    
    var expandStart = new Date();
    
    var expanded = this.expand(state);
    for (var i = 0; i < expanded.length; i++) {
        this.nodes.push(expanded[i]);
    }
    
    this.expandTime += (new Date()).getTime() - expandStart.getTime();
    
    return true;
}

Search.prototype.expand = function(s) {
    var states = new Array();
    var moveCount = s[2] + 1;
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newS1 = this.context.moveS1(s[0], i);
        var newS2 = this.context.moveS2(s[1], i);
        
        //var hash = this.context.hashState(newS1, newS2);
        //if (foundHashes.indexOf(hash) >= 0) continue;
        
        states.push([newS1, newS2, moveCount]);
        //foundHashes.push(hash);
    }
    return states;
}

exports.Search = Search;