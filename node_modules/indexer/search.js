var Table = require('./table.js').Table;
var ContextState = require('./context').ContextState;
var FastList = require('fast-list');

function Node(state, depth) {
    this.state = state;
    this.depth = depth;
}

function Search(context, s1Id, s2Id) {
    this.context = context;
    this.table = new Table(context.hashCount());
    this.iterationTable = new Table(context.hashCount());
    this.nodeCount = 0;
    
    for (var i = 0; i < this.context.hashCount(); i++) {
        this.table.setValue(i, 15);
        this.iterationTable.setValue(i, 0);
    }
    
    this.identity = new Node(new ContextState(s1Id, s2Id), 0);
    
    this.nodes = new FastList();
    this.nodes.push(this.identity);
}

Search.prototype.expand = function(s) {
    var states = new Array();
    var foundHashes = new Array();
    for (var i = 0; i < 18; i++) {
        var newState = this.context.moveState(s.state, i);
        
        var hash = this.context.hashState(newState);
        if (foundHashes.indexOf(hash) >= 0) continue;
        foundHashes.push(hash);
        
        var node = new Node(newState, s.depth + 1);
        states.push(node);
    }
    return states;
}


/** Forward search functions **/

Search.prototype.nextIteration = function(maxDepth) {
    var node = this.nodes.shift();
    if (!node) return false;
    
    var hash = this.context.hashState(node);
    var pruneValue = this.table.getValue(hash);
        
    if (pruneValue == 15) {
        this.table.setValue(hash, currentDepth);
        this.nodeCount++;
    } else {
        // this node has already been seen
        return true;
    }
    
    if (node.depth == maxDepth) return true;
    var expanded = this.expand(node);
    for (var i = 0; i < expanded.length; i++) {
        this.nodes.push(expanded[i]);
    }
    
    return true;
}

exports.Search = Search;